// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX; import com.ctre.phoenix.motorcontrol.NeutralMode;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX frontLeftDriveMotor;
private WPI_TalonFX backLeftDriveMotor;
private MotorControllerGroup leftDriveMotorGroup;
private WPI_TalonFX frontRightDriveMotor;
private WPI_TalonFX backRightDriveMotor;
private MotorControllerGroup rightDriveMotorGroup;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeftDriveMotor = new WPI_TalonFX(0);
 
    /* Factory default hardware to prevent unexpected behavior */
frontLeftDriveMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
frontLeftDriveMotor.setInverted(false);
frontLeftDriveMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
frontLeftDriveMotor.configNominalOutputForward(0, 30);
frontLeftDriveMotor.configNominalOutputReverse(0, 30);
frontLeftDriveMotor.configPeakOutputForward(1, 30);
frontLeftDriveMotor.configPeakOutputReverse(-1, 30);
        


backLeftDriveMotor = new WPI_TalonFX(1);
 
    /* Factory default hardware to prevent unexpected behavior */
backLeftDriveMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
backLeftDriveMotor.setInverted(false);
backLeftDriveMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
backLeftDriveMotor.configNominalOutputForward(0, 30);
backLeftDriveMotor.configNominalOutputReverse(0, 30);
backLeftDriveMotor.configPeakOutputForward(1, 30);
backLeftDriveMotor.configPeakOutputReverse(-1, 30);
        


leftDriveMotorGroup = new MotorControllerGroup(frontLeftDriveMotor, backLeftDriveMotor  );
 addChild("LeftDriveMotorGroup",leftDriveMotorGroup);
 

frontRightDriveMotor = new WPI_TalonFX(2);
 
    /* Factory default hardware to prevent unexpected behavior */
frontRightDriveMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
frontRightDriveMotor.setInverted(false);
frontRightDriveMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
frontRightDriveMotor.configNominalOutputForward(0, 30);
frontRightDriveMotor.configNominalOutputReverse(0, 30);
frontRightDriveMotor.configPeakOutputForward(1, 30);
frontRightDriveMotor.configPeakOutputReverse(-1, 30);
        


backRightDriveMotor = new WPI_TalonFX(8);
 
    /* Factory default hardware to prevent unexpected behavior */
backRightDriveMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
backRightDriveMotor.setInverted(false);
backRightDriveMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
backRightDriveMotor.configNominalOutputForward(0, 30);
backRightDriveMotor.configNominalOutputReverse(0, 30);
backRightDriveMotor.configPeakOutputForward(1, 30);
backRightDriveMotor.configPeakOutputReverse(-1, 30);
        


rightDriveMotorGroup = new MotorControllerGroup(frontRightDriveMotor, backRightDriveMotor  );
 addChild("RightDriveMotorGroup",rightDriveMotorGroup);
 

differentialDrive = new DifferentialDrive(leftDriveMotorGroup, rightDriveMotorGroup);
 addChild("DifferentialDrive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

